// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tickets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RespondsServiceClient is the client API for RespondsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RespondsServiceClient interface {
	RespondToTicket(ctx context.Context, in *RespondToTicketIn, opts ...grpc.CallOption) (*RespondToTicketOut, error)
	GetRespond(ctx context.Context, in *GetRespondIn, opts ...grpc.CallOption) (*GetRespondOut, error)
	GetTicketResponds(ctx context.Context, in *GetTicketRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error)
	GetMyResponds(ctx context.Context, in *GetMyRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error)
	GetProposedResponds(ctx context.Context, in *GetProposedRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error)
}

type respondsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRespondsServiceClient(cc grpc.ClientConnInterface) RespondsServiceClient {
	return &respondsServiceClient{cc}
}

func (c *respondsServiceClient) RespondToTicket(ctx context.Context, in *RespondToTicketIn, opts ...grpc.CallOption) (*RespondToTicketOut, error) {
	out := new(RespondToTicketOut)
	err := c.cc.Invoke(ctx, "/responds.RespondsService/RespondToTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *respondsServiceClient) GetRespond(ctx context.Context, in *GetRespondIn, opts ...grpc.CallOption) (*GetRespondOut, error) {
	out := new(GetRespondOut)
	err := c.cc.Invoke(ctx, "/responds.RespondsService/GetRespond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *respondsServiceClient) GetTicketResponds(ctx context.Context, in *GetTicketRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error) {
	out := new(GetTicketRespondsOut)
	err := c.cc.Invoke(ctx, "/responds.RespondsService/GetTicketResponds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *respondsServiceClient) GetMyResponds(ctx context.Context, in *GetMyRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error) {
	out := new(GetTicketRespondsOut)
	err := c.cc.Invoke(ctx, "/responds.RespondsService/GetMyResponds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *respondsServiceClient) GetProposedResponds(ctx context.Context, in *GetProposedRespondsIn, opts ...grpc.CallOption) (*GetTicketRespondsOut, error) {
	out := new(GetTicketRespondsOut)
	err := c.cc.Invoke(ctx, "/responds.RespondsService/GetProposedResponds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RespondsServiceServer is the server API for RespondsService service.
// All implementations must embed UnimplementedRespondsServiceServer
// for forward compatibility
type RespondsServiceServer interface {
	RespondToTicket(context.Context, *RespondToTicketIn) (*RespondToTicketOut, error)
	GetRespond(context.Context, *GetRespondIn) (*GetRespondOut, error)
	GetTicketResponds(context.Context, *GetTicketRespondsIn) (*GetTicketRespondsOut, error)
	GetMyResponds(context.Context, *GetMyRespondsIn) (*GetTicketRespondsOut, error)
	GetProposedResponds(context.Context, *GetProposedRespondsIn) (*GetTicketRespondsOut, error)
	mustEmbedUnimplementedRespondsServiceServer()
}

// UnimplementedRespondsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRespondsServiceServer struct {
}

func (UnimplementedRespondsServiceServer) RespondToTicket(context.Context, *RespondToTicketIn) (*RespondToTicketOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToTicket not implemented")
}
func (UnimplementedRespondsServiceServer) GetRespond(context.Context, *GetRespondIn) (*GetRespondOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRespond not implemented")
}
func (UnimplementedRespondsServiceServer) GetTicketResponds(context.Context, *GetTicketRespondsIn) (*GetTicketRespondsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketResponds not implemented")
}
func (UnimplementedRespondsServiceServer) GetMyResponds(context.Context, *GetMyRespondsIn) (*GetTicketRespondsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyResponds not implemented")
}
func (UnimplementedRespondsServiceServer) GetProposedResponds(context.Context, *GetProposedRespondsIn) (*GetTicketRespondsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposedResponds not implemented")
}
func (UnimplementedRespondsServiceServer) mustEmbedUnimplementedRespondsServiceServer() {}

// UnsafeRespondsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RespondsServiceServer will
// result in compilation errors.
type UnsafeRespondsServiceServer interface {
	mustEmbedUnimplementedRespondsServiceServer()
}

func RegisterRespondsServiceServer(s grpc.ServiceRegistrar, srv RespondsServiceServer) {
	s.RegisterService(&RespondsService_ServiceDesc, srv)
}

func _RespondsService_RespondToTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToTicketIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RespondsServiceServer).RespondToTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/responds.RespondsService/RespondToTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RespondsServiceServer).RespondToTicket(ctx, req.(*RespondToTicketIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RespondsService_GetRespond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRespondIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RespondsServiceServer).GetRespond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/responds.RespondsService/GetRespond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RespondsServiceServer).GetRespond(ctx, req.(*GetRespondIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RespondsService_GetTicketResponds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRespondsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RespondsServiceServer).GetTicketResponds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/responds.RespondsService/GetTicketResponds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RespondsServiceServer).GetTicketResponds(ctx, req.(*GetTicketRespondsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RespondsService_GetMyResponds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyRespondsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RespondsServiceServer).GetMyResponds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/responds.RespondsService/GetMyResponds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RespondsServiceServer).GetMyResponds(ctx, req.(*GetMyRespondsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RespondsService_GetProposedResponds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposedRespondsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RespondsServiceServer).GetProposedResponds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/responds.RespondsService/GetProposedResponds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RespondsServiceServer).GetProposedResponds(ctx, req.(*GetProposedRespondsIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RespondsService_ServiceDesc is the grpc.ServiceDesc for RespondsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RespondsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "responds.RespondsService",
	HandlerType: (*RespondsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RespondToTicket",
			Handler:    _RespondsService_RespondToTicket_Handler,
		},
		{
			MethodName: "GetRespond",
			Handler:    _RespondsService_GetRespond_Handler,
		},
		{
			MethodName: "GetTicketResponds",
			Handler:    _RespondsService_GetTicketResponds_Handler,
		},
		{
			MethodName: "GetMyResponds",
			Handler:    _RespondsService_GetMyResponds_Handler,
		},
		{
			MethodName: "GetProposedResponds",
			Handler:    _RespondsService_GetProposedResponds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tickets/responds.proto",
}

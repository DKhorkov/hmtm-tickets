syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package tickets;

option go_package = "github.com/DKhorkov/hmtm-tickets/api/protobuf/tickets;tickets";


service TicketsService {
  rpc CreateTicket(CreateTicketIn) returns (CreateTicketOut) {}
  rpc GetTicket(GetTicketIn) returns (GetTicketOut) {}
  rpc GetTickets(GetTicketsIn) returns (GetTicketsOut) {}
  rpc CountTickets(CountTicketsIn) returns (CountOut) {}
  rpc GetUserTickets(GetUserTicketsIn) returns (GetTicketsOut) {}
  rpc CountUserTickets(CountUserTicketsIn) returns (CountOut) {}
  rpc DeleteTicket(DeleteTicketIn) returns (google.protobuf.Empty) {}
  rpc UpdateTicket(UpdateTicketIn) returns (google.protobuf.Empty) {}
}

message CreateTicketIn {
  uint64 userID = 1;
  string name = 2;
  string description = 3;
  optional float price = 4;
  uint32 quantity = 5;
  uint32 categoryID = 6;
  repeated uint32 tagIDs = 7;
  repeated string attachments = 8;
}

message CreateTicketOut {
  uint64 ticketID = 1;
}

message GetTicketIn {
  uint64 ID = 1;
}

message Attachment {
  uint64 ID = 1;
  uint64 ticketID = 2;
  string link = 3;
  google.protobuf.Timestamp createdAt = 4;
  google.protobuf.Timestamp updatedAt = 5;
}

message GetTicketOut {
  uint64 ID = 1;
  uint64 userID = 2;
  string name = 3;
  string description = 4;
  optional float price = 5;
  uint32 quantity = 6;
  uint32 categoryID = 7;
  repeated uint32 tagIDs = 8;
  repeated Attachment attachments = 9;
  google.protobuf.Timestamp createdAt = 10;
  google.protobuf.Timestamp updatedAt = 11;
}

message GetTicketsIn {
  optional Pagination pagination = 1;
  optional TicketsFilters filters = 2;
}

message GetTicketsOut {
  repeated GetTicketOut tickets = 1;
}

message GetUserTicketsIn {
  uint64 userID = 1;
  optional Pagination pagination = 2;
  optional TicketsFilters filters = 3;
}

message DeleteTicketIn {
  uint64 ID = 1 ;
}

message UpdateTicketIn {
  uint64 ID = 1;
  optional string name = 2;
  optional string description = 3;
  optional float price = 4;
  optional uint32 quantity = 5;
  optional uint32 categoryID = 6;
  repeated uint32 tagIDs = 7;
  repeated string attachments = 8;
}

message CountTicketsIn {
  optional TicketsFilters filters = 1;
}

message CountUserTicketsIn {
  uint64 userID = 1;
  optional TicketsFilters filters = 2;
}

message CountOut {
  uint64 count = 1;
}

message Pagination {
  optional uint64 limit = 1;
  optional uint64 offset = 2;
}

message TicketsFilters {
  optional string search = 1;
  optional float priceCeil = 2;  // max price
  optional float priceFloor = 3;  // min price
  optional uint32 quantityFloor = 4;  // min quantity
  repeated uint32 categoryIDs = 5;
  repeated uint32 tagIDs = 6;
  optional bool createdAtOrderByAsc = 7;
}

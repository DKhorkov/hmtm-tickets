// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go
//
// Generated by this command:
//
//	mockgen -source=clients.go -destination=../../mocks/clients/toys_client.go -package=mockclients -exclude_interfaces=
//

// Package mockclients is a generated GoMock package.
package mockclients

import (
	context "context"
	reflect "reflect"

	toys "github.com/DKhorkov/hmtm-toys/api/protobuf/generated/go/toys"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockToysClient is a mock of ToysClient interface.
type MockToysClient struct {
	ctrl     *gomock.Controller
	recorder *MockToysClientMockRecorder
	isgomock struct{}
}

// MockToysClientMockRecorder is the mock recorder for MockToysClient.
type MockToysClientMockRecorder struct {
	mock *MockToysClient
}

// NewMockToysClient creates a new mock instance.
func NewMockToysClient(ctrl *gomock.Controller) *MockToysClient {
	mock := &MockToysClient{ctrl: ctrl}
	mock.recorder = &MockToysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToysClient) EXPECT() *MockToysClientMockRecorder {
	return m.recorder
}

// CreateTags mocks base method.
func (m *MockToysClient) CreateTags(ctx context.Context, in *toys.CreateTagsIn, opts ...grpc.CallOption) (*toys.CreateTagsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTags", varargs...)
	ret0, _ := ret[0].(*toys.CreateTagsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockToysClientMockRecorder) CreateTags(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockToysClient)(nil).CreateTags), varargs...)
}

// GetCategories mocks base method.
func (m *MockToysClient) GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*toys.GetCategoriesOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCategories", varargs...)
	ret0, _ := ret[0].(*toys.GetCategoriesOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockToysClientMockRecorder) GetCategories(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockToysClient)(nil).GetCategories), varargs...)
}

// GetCategory mocks base method.
func (m *MockToysClient) GetCategory(ctx context.Context, in *toys.GetCategoryIn, opts ...grpc.CallOption) (*toys.GetCategoryOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCategory", varargs...)
	ret0, _ := ret[0].(*toys.GetCategoryOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockToysClientMockRecorder) GetCategory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockToysClient)(nil).GetCategory), varargs...)
}

// GetMaster mocks base method.
func (m *MockToysClient) GetMaster(ctx context.Context, in *toys.GetMasterIn, opts ...grpc.CallOption) (*toys.GetMasterOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaster", varargs...)
	ret0, _ := ret[0].(*toys.GetMasterOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaster indicates an expected call of GetMaster.
func (mr *MockToysClientMockRecorder) GetMaster(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaster", reflect.TypeOf((*MockToysClient)(nil).GetMaster), varargs...)
}

// GetMasterByUser mocks base method.
func (m *MockToysClient) GetMasterByUser(ctx context.Context, in *toys.GetMasterByUserIn, opts ...grpc.CallOption) (*toys.GetMasterOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMasterByUser", varargs...)
	ret0, _ := ret[0].(*toys.GetMasterOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUser indicates an expected call of GetMasterByUser.
func (mr *MockToysClientMockRecorder) GetMasterByUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUser", reflect.TypeOf((*MockToysClient)(nil).GetMasterByUser), varargs...)
}

// GetMasters mocks base method.
func (m *MockToysClient) GetMasters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*toys.GetMastersOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMasters", varargs...)
	ret0, _ := ret[0].(*toys.GetMastersOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasters indicates an expected call of GetMasters.
func (mr *MockToysClientMockRecorder) GetMasters(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasters", reflect.TypeOf((*MockToysClient)(nil).GetMasters), varargs...)
}

// GetTag mocks base method.
func (m *MockToysClient) GetTag(ctx context.Context, in *toys.GetTagIn, opts ...grpc.CallOption) (*toys.GetTagOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTag", varargs...)
	ret0, _ := ret[0].(*toys.GetTagOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockToysClientMockRecorder) GetTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockToysClient)(nil).GetTag), varargs...)
}

// GetTags mocks base method.
func (m *MockToysClient) GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*toys.GetTagsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*toys.GetTagsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockToysClientMockRecorder) GetTags(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockToysClient)(nil).GetTags), varargs...)
}

// RegisterMaster mocks base method.
func (m *MockToysClient) RegisterMaster(ctx context.Context, in *toys.RegisterMasterIn, opts ...grpc.CallOption) (*toys.RegisterMasterOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMaster", varargs...)
	ret0, _ := ret[0].(*toys.RegisterMasterOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMaster indicates an expected call of RegisterMaster.
func (mr *MockToysClientMockRecorder) RegisterMaster(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMaster", reflect.TypeOf((*MockToysClient)(nil).RegisterMaster), varargs...)
}

// UpdateMaster mocks base method.
func (m *MockToysClient) UpdateMaster(ctx context.Context, in *toys.UpdateMasterIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMaster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaster indicates an expected call of UpdateMaster.
func (mr *MockToysClientMockRecorder) UpdateMaster(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaster", reflect.TypeOf((*MockToysClient)(nil).UpdateMaster), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: usecases.go
//
// Generated by this command:
//
//	mockgen -source=usecases.go -destination=../../mocks/usecases/usecases.go -package=mockusecases
//

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
	isgomock struct{}
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockUseCases) CreateTicket(ctx context.Context, ticketData entities.CreateTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, ticketData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockUseCasesMockRecorder) CreateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockUseCases)(nil).CreateTicket), ctx, ticketData)
}

// DeleteRespond mocks base method.
func (m *MockUseCases) DeleteRespond(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRespond", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockUseCasesMockRecorder) DeleteRespond(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockUseCases)(nil).DeleteRespond), ctx, id)
}

// DeleteTicket mocks base method.
func (m *MockUseCases) DeleteTicket(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockUseCasesMockRecorder) DeleteTicket(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockUseCases)(nil).DeleteTicket), ctx, id)
}

// GetAllTickets mocks base method.
func (m *MockUseCases) GetAllTickets(ctx context.Context) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockUseCasesMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockUseCases)(nil).GetAllTickets), ctx)
}

// GetRespondByID mocks base method.
func (m *MockUseCases) GetRespondByID(ctx context.Context, id uint64) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockUseCasesMockRecorder) GetRespondByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockUseCases)(nil).GetRespondByID), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockUseCases) GetTicketByID(ctx context.Context, id uint64) (*entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockUseCasesMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockUseCases)(nil).GetTicketByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockUseCases) GetTicketResponds(ctx context.Context, ticketID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockUseCasesMockRecorder) GetTicketResponds(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockUseCases)(nil).GetTicketResponds), ctx, ticketID)
}

// GetUserResponds mocks base method.
func (m *MockUseCases) GetUserResponds(ctx context.Context, userID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserResponds", ctx, userID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResponds indicates an expected call of GetUserResponds.
func (mr *MockUseCasesMockRecorder) GetUserResponds(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResponds", reflect.TypeOf((*MockUseCases)(nil).GetUserResponds), ctx, userID)
}

// GetUserTickets mocks base method.
func (m *MockUseCases) GetUserTickets(ctx context.Context, userID uint64) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockUseCasesMockRecorder) GetUserTickets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockUseCases)(nil).GetUserTickets), ctx, userID)
}

// RespondToTicket mocks base method.
func (m *MockUseCases) RespondToTicket(ctx context.Context, rawRespondData entities.RawRespondToTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToTicket", ctx, rawRespondData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockUseCasesMockRecorder) RespondToTicket(ctx, rawRespondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockUseCases)(nil).RespondToTicket), ctx, rawRespondData)
}

// UpdateRespond mocks base method.
func (m *MockUseCases) UpdateRespond(ctx context.Context, respondData entities.UpdateRespondDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespond", ctx, respondData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockUseCasesMockRecorder) UpdateRespond(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockUseCases)(nil).UpdateRespond), ctx, respondData)
}

// UpdateTicket mocks base method.
func (m *MockUseCases) UpdateTicket(ctx context.Context, rawTicketData entities.RawUpdateTicketDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, rawTicketData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockUseCasesMockRecorder) UpdateTicket(ctx, rawTicketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockUseCases)(nil).UpdateTicket), ctx, rawTicketData)
}

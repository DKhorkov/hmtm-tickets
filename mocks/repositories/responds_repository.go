// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/responds_repository.go -exclude_interfaces=TicketsRepository,ToysRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRespondsRepository is a mock of RespondsRepository interface.
type MockRespondsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRespondsRepositoryMockRecorder
	isgomock struct{}
}

// MockRespondsRepositoryMockRecorder is the mock recorder for MockRespondsRepository.
type MockRespondsRepositoryMockRecorder struct {
	mock *MockRespondsRepository
}

// NewMockRespondsRepository creates a new mock instance.
func NewMockRespondsRepository(ctrl *gomock.Controller) *MockRespondsRepository {
	mock := &MockRespondsRepository{ctrl: ctrl}
	mock.recorder = &MockRespondsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespondsRepository) EXPECT() *MockRespondsRepositoryMockRecorder {
	return m.recorder
}

// DeleteRespond mocks base method.
func (m *MockRespondsRepository) DeleteRespond(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRespond", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockRespondsRepositoryMockRecorder) DeleteRespond(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockRespondsRepository)(nil).DeleteRespond), ctx, id)
}

// GetMasterResponds mocks base method.
func (m *MockRespondsRepository) GetMasterResponds(ctx context.Context, masterID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterResponds", ctx, masterID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterResponds indicates an expected call of GetMasterResponds.
func (mr *MockRespondsRepositoryMockRecorder) GetMasterResponds(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterResponds", reflect.TypeOf((*MockRespondsRepository)(nil).GetMasterResponds), ctx, masterID)
}

// GetRespondByID mocks base method.
func (m *MockRespondsRepository) GetRespondByID(ctx context.Context, id uint64) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockRespondsRepositoryMockRecorder) GetRespondByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockRespondsRepository)(nil).GetRespondByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockRespondsRepository) GetTicketResponds(ctx context.Context, ticketID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockRespondsRepositoryMockRecorder) GetTicketResponds(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockRespondsRepository)(nil).GetTicketResponds), ctx, ticketID)
}

// RespondToTicket mocks base method.
func (m *MockRespondsRepository) RespondToTicket(ctx context.Context, respondData entities.RespondToTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToTicket", ctx, respondData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockRespondsRepositoryMockRecorder) RespondToTicket(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockRespondsRepository)(nil).RespondToTicket), ctx, respondData)
}

// UpdateRespond mocks base method.
func (m *MockRespondsRepository) UpdateRespond(ctx context.Context, respondData entities.UpdateRespondDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespond", ctx, respondData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockRespondsRepositoryMockRecorder) UpdateRespond(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockRespondsRepository)(nil).UpdateRespond), ctx, respondData)
}

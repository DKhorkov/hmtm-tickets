// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/tickets_repository.go -exclude_interfaces=RespondsRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketsRepository is a mock of TicketsRepository interface.
type MockTicketsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsRepositoryMockRecorder
	isgomock struct{}
}

// MockTicketsRepositoryMockRecorder is the mock recorder for MockTicketsRepository.
type MockTicketsRepositoryMockRecorder struct {
	mock *MockTicketsRepository
}

// NewMockTicketsRepository creates a new mock instance.
func NewMockTicketsRepository(ctrl *gomock.Controller) *MockTicketsRepository {
	mock := &MockTicketsRepository{ctrl: ctrl}
	mock.recorder = &MockTicketsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsRepository) EXPECT() *MockTicketsRepositoryMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketsRepository) CreateTicket(ctx context.Context, ticketData entities.CreateTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, ticketData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketsRepositoryMockRecorder) CreateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketsRepository)(nil).CreateTicket), ctx, ticketData)
}

// GetAllTickets mocks base method.
func (m *MockTicketsRepository) GetAllTickets(ctx context.Context) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockTicketsRepositoryMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockTicketsRepository)(nil).GetAllTickets), ctx)
}

// GetTicketByID mocks base method.
func (m *MockTicketsRepository) GetTicketByID(ctx context.Context, id uint64) (*entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockTicketsRepositoryMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockTicketsRepository)(nil).GetTicketByID), ctx, id)
}

// GetUserTickets mocks base method.
func (m *MockTicketsRepository) GetUserTickets(ctx context.Context, userID uint64) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockTicketsRepositoryMockRecorder) GetUserTickets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockTicketsRepository)(nil).GetUserTickets), ctx, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/toys_repository.go -exclude_interfaces=RespondsRepository,TicketsRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockToysRepository is a mock of ToysRepository interface.
type MockToysRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToysRepositoryMockRecorder
	isgomock struct{}
}

// MockToysRepositoryMockRecorder is the mock recorder for MockToysRepository.
type MockToysRepositoryMockRecorder struct {
	mock *MockToysRepository
}

// NewMockToysRepository creates a new mock instance.
func NewMockToysRepository(ctrl *gomock.Controller) *MockToysRepository {
	mock := &MockToysRepository{ctrl: ctrl}
	mock.recorder = &MockToysRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToysRepository) EXPECT() *MockToysRepositoryMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockToysRepository) GetAllCategories(ctx context.Context) ([]entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockToysRepositoryMockRecorder) GetAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockToysRepository)(nil).GetAllCategories), ctx)
}

// GetAllTags mocks base method.
func (m *MockToysRepository) GetAllTags(ctx context.Context) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockToysRepositoryMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockToysRepository)(nil).GetAllTags), ctx)
}

// GetMasterByUserID mocks base method.
func (m *MockToysRepository) GetMasterByUserID(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUserID indicates an expected call of GetMasterByUserID.
func (mr *MockToysRepositoryMockRecorder) GetMasterByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUserID", reflect.TypeOf((*MockToysRepository)(nil).GetMasterByUserID), ctx, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/tickets_service.go -package=mockservices -exclude_interfaces=RespondsService,ToysService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketsService is a mock of TicketsService interface.
type MockTicketsService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsServiceMockRecorder
	isgomock struct{}
}

// MockTicketsServiceMockRecorder is the mock recorder for MockTicketsService.
type MockTicketsServiceMockRecorder struct {
	mock *MockTicketsService
}

// NewMockTicketsService creates a new mock instance.
func NewMockTicketsService(ctrl *gomock.Controller) *MockTicketsService {
	mock := &MockTicketsService{ctrl: ctrl}
	mock.recorder = &MockTicketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsService) EXPECT() *MockTicketsServiceMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketsService) CreateTicket(ctx context.Context, ticketData entities.CreateTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, ticketData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketsServiceMockRecorder) CreateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketsService)(nil).CreateTicket), ctx, ticketData)
}

// DeleteTicket mocks base method.
func (m *MockTicketsService) DeleteTicket(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockTicketsServiceMockRecorder) DeleteTicket(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockTicketsService)(nil).DeleteTicket), ctx, id)
}

// GetAllTickets mocks base method.
func (m *MockTicketsService) GetAllTickets(ctx context.Context) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockTicketsServiceMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockTicketsService)(nil).GetAllTickets), ctx)
}

// GetTicketByID mocks base method.
func (m *MockTicketsService) GetTicketByID(ctx context.Context, id uint64) (*entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockTicketsServiceMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockTicketsService)(nil).GetTicketByID), ctx, id)
}

// GetUserTickets mocks base method.
func (m *MockTicketsService) GetUserTickets(ctx context.Context, userID uint64) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockTicketsServiceMockRecorder) GetUserTickets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockTicketsService)(nil).GetUserTickets), ctx, userID)
}

// UpdateTicket mocks base method.
func (m *MockTicketsService) UpdateTicket(ctx context.Context, ticketData entities.UpdateTicketDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, ticketData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockTicketsServiceMockRecorder) UpdateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockTicketsService)(nil).UpdateTicket), ctx, ticketData)
}

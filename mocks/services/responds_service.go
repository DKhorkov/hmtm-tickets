// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/responds_service.go -package=mockservices -exclude_interfaces=TicketsService,ToysService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-tickets/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRespondsService is a mock of RespondsService interface.
type MockRespondsService struct {
	ctrl     *gomock.Controller
	recorder *MockRespondsServiceMockRecorder
	isgomock struct{}
}

// MockRespondsServiceMockRecorder is the mock recorder for MockRespondsService.
type MockRespondsServiceMockRecorder struct {
	mock *MockRespondsService
}

// NewMockRespondsService creates a new mock instance.
func NewMockRespondsService(ctrl *gomock.Controller) *MockRespondsService {
	mock := &MockRespondsService{ctrl: ctrl}
	mock.recorder = &MockRespondsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespondsService) EXPECT() *MockRespondsServiceMockRecorder {
	return m.recorder
}

// DeleteRespond mocks base method.
func (m *MockRespondsService) DeleteRespond(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRespond", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockRespondsServiceMockRecorder) DeleteRespond(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockRespondsService)(nil).DeleteRespond), ctx, id)
}

// GetMasterResponds mocks base method.
func (m *MockRespondsService) GetMasterResponds(ctx context.Context, masterID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterResponds", ctx, masterID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterResponds indicates an expected call of GetMasterResponds.
func (mr *MockRespondsServiceMockRecorder) GetMasterResponds(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterResponds", reflect.TypeOf((*MockRespondsService)(nil).GetMasterResponds), ctx, masterID)
}

// GetRespondByID mocks base method.
func (m *MockRespondsService) GetRespondByID(ctx context.Context, id uint64) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockRespondsServiceMockRecorder) GetRespondByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockRespondsService)(nil).GetRespondByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockRespondsService) GetTicketResponds(ctx context.Context, ticketID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockRespondsServiceMockRecorder) GetTicketResponds(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockRespondsService)(nil).GetTicketResponds), ctx, ticketID)
}

// RespondToTicket mocks base method.
func (m *MockRespondsService) RespondToTicket(ctx context.Context, respondData entities.RespondToTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToTicket", ctx, respondData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockRespondsServiceMockRecorder) RespondToTicket(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockRespondsService)(nil).RespondToTicket), ctx, respondData)
}

// UpdateRespond mocks base method.
func (m *MockRespondsService) UpdateRespond(ctx context.Context, respondData entities.UpdateRespondDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespond", ctx, respondData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockRespondsServiceMockRecorder) UpdateRespond(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockRespondsService)(nil).UpdateRespond), ctx, respondData)
}
